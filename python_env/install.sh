#!/bin/bash

START_WD=$(pwd)

# Define the Python version (pick from https://www.python.org/downloads/)
PYTHON_VERSION="3.10.14"
PYTHON_VERSION_NOPATCH=$(echo $PYTHON_VERSION | cut -d'.' -f1,2)

# Define the installation directories
SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
cd $SCRIPT_DIR

PYTHON_INSTALL_DIR="$SCRIPT_DIR/python-$PYTHON_VERSION"
PYTHON_SOURCE_DIR="$SCRIPT_DIR/python-src"
OPENSSL_INSTALL_DIR="$SCRIPT_DIR/openssl"
OPENSSL_SOURCE_DIR="$SCRIPT_DIR/openssl-src"
XZ_INSTALL_DIR="$SCRIPT_DIR/xz"
XZ_SOURCE_DIR="$SCRIPT_DIR/xz-src"
READLINE_INSTALL_DIR="$SCRIPT_DIR/readline"
READLINE_SOURCE_DIR="$SCRIPT_DIR/readline-src"

# when compiling a new python version, this block does not need to be re-run

if [ ! -e $READLINE_INSTALL_DIR ] ; then
    # download and compile xz to provide lzma support for python
    echo downloading readline
    curl -L -o readline.tar.gz https://git.savannah.gnu.org/cgit/readline.git/snapshot/readline-8.2.tar.gz
    mkdir -p $READLINE_INSTALL_DIR $READLINE_SOURCE_DIR
    tar -xzf readline.tar.gz -C $READLINE_SOURCE_DIR --strip-components=1
    cd $READLINE_SOURCE_DIR
    ./configure --prefix=$READLINE_INSTALL_DIR
    make -j
    make -j install

    # remove readline source code files after installation
    cd $SCRIPT_DIR
    rm -rf $READLINE_SOURCE_DIR $SCRIPT_DIR/readline.tar.gz
	echo finished installing readline
fi
    
if [ ! -e $OPENSSL_INSTALL_DIR ] ; then
    # download and compile openssl for use by python
    echo downloading openssl
    curl -L -o openssl.tar.gz https://www.openssl.org/source/openssl-3.3.1.tar.gz
    mkdir -p $OPENSSL_INSTALL_DIR $OPENSSL_SOURCE_DIR
    tar -xzf openssl.tar.gz -C $OPENSSL_SOURCE_DIR --strip-components=1
    cd $OPENSSL_SOURCE_DIR
    ./config --prefix=$OPENSSL_INSTALL_DIR --openssldir=$OPENSSL_INSTALL_DIR/ssl shared zlib
    make -j1 depend
    make -j
    # make -j test
    make -j install_sw

    # remove openssl source code files after installation
    cd $SCRIPT_DIR
    rm -rf $OPENSSL_SOURCE_DIR $SCRIPT_DIR/openssl.tar.gz
	echo finished installing openssl
fi

if [ ! -e $XZ_INSTALL_DIR ] ; then
    # download and compile xz to provide lzma support for python
    echo downloading xz
    curl -L -o xz.tar.gz https://github.com/tukaani-project/xz/releases/download/v5.6.2/xz-5.6.2.tar.gz
    mkdir -p $XZ_INSTALL_DIR $XZ_SOURCE_DIR
    tar -xzf xz.tar.gz -C $XZ_SOURCE_DIR --strip-components=1
    cd $XZ_SOURCE_DIR
    ./configure --prefix=$XZ_INSTALL_DIR
    make -j
    make -j install

    # remove xz source code files after installation
    cd $SCRIPT_DIR
    rm -rf $XZ_SOURCE_DIR $SCRIPT_DIR/xz.tar.gz
	echo finished installing xz
fi

# Update environment variables to include xz and openssl
export PATH=$XZ_INSTALL_DIR/bin:$OPENSSL_INSTALL_DIR/bin:$READLINE_INSTALL_DIR/bin:$PATH
export LD_LIBRARY_PATH=$XZ_INSTALL_DIR/lib:$OPENSSL_INSTALL_DIR/lib:$READLINE_INSTALL_DIR/lib:$LD_LIBRARY_PATH
export C_INCLUDE_PATH=$XZ_INSTALL_DIR/include:$OPENSSL_INSTALL_DIR/include:$READLINE_INSTALL_DIR/include:$C_INCLUDE_PATH
export LIBRARY_PATH=$XZ_INSTALL_DIR/lib:$OPENSSL_INSTALL_DIR/lib:$READLINE_INSTALL_DIR/lib:$LIBRARY_PATH

# add openssl/lib64 and openssl/lib to linker args. which of the two is generated by openssl is platform dependent
export LDFLAGS="$LDFLAGS -L$READLINE_INSTALL_DIR/lib -L$OPENSSL_INSTALL_DIR/lib64 -L$OPENSSL_INSTALL_DIR/lib -Wl,-rpath=$OPENSSL_INSTALL_DIR/lib64 -Wl,-rpath=$OPENSSL_INSTALL_DIR/lib"

# Download and compile python
if [ ! -e $PYTHON_INSTALL_DIR ] ; then
	if [ ! -e "python.tgz" ]; then
		PYTHON_URL="https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz"
		curl -o python.tgz $PYTHON_URL
	fi
	
	mkdir -p $PYTHON_INSTALL_DIR $PYTHON_SOURCE_DIR
	tar -xzf python.tgz -C $PYTHON_SOURCE_DIR --strip-components=1
	cd $PYTHON_SOURCE_DIR
	# Configure and make
	# + enable ssl support (required by pip for pypi packages) - this requires openssl to be installed on the system!
	# + also apply several optimizations to improve runtime performance (no --enable-optimizations flag \
	# because pgo generates wrong raw profile data, version=8 instead of expected 9?!)
	./configure --with-openssl=$OPENSSL_INSTALL_DIR --with-readline --with-readline-dir=$READLINE_INSTALL_DIR --prefix=$PYTHON_INSTALL_DIR --with-lto --with-computed-gotos --with-ensurepip
	
	# copy configuration file, e.g. for debugging
	if true; then
		cp config.log ..
	fi
	
	make -j
	make -j altinstall

	# remove python source code files after installation
	cd $SCRIPT_DIR
	rm -rf $PYTHON_SOURCE_DIR $SCRIPT_DIR/python.tgz

	# create link to be able to use python3 instead of python3.10
	cd $PYTHON_INSTALL_DIR/bin
	ln -s python$PYTHON_VERSION_NOPATCH python3

	echo "Python $PYTHON_VERSION installed successfully into $PYTHON_INSTALL_DIR"
fi

echo "Use 'source activate.sh' to activate this Python environment."

# install package dependencies
cd $SCRIPT_DIR
source activate.sh
python3 -m pip install --upgrade pip

cd $SCRIPT_DIR/.. # project root dir
python3 -m pip install -e .
