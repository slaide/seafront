"""
This type stub file was generated by pyright.
"""

from typing import List, Tuple, Literal, Callable, Any

class ToupcamResolution:
    "unsigned"
    width:int
    "unsigned"
    height:int

class ToupcamModelV2:
    name:str

    "TOUPCAM_FLAG_xxx (unsigned long long)"
    flag:int

    "unsigned           maxspeed; /* maximum speed level, Toupcam_get_MaxSpeed, the speed range = [0, maxspeed], closed interval */"
    maxspeed:int
    "unsigned           preview;  /* number of preview resolution, Toupcam_get_ResolutionNumber */"
    preview:int
    "unsigned           still;    /* number of still resolution, Toupcam_get_StillResolutionNumber */"
    still:int
    "unsigned           ; /* maximum fan speed, fan speed range = [0, max], closed interval */"
    maxfanspeed:int
    "unsigned           ioctrol;     /* number of input/output control */"
    ioctrol:int

    "physical pixel size in micrometer"
    xpixsz:float
    "physical pixel size in micrometer"
    ypixsz:float

    res:List[ToupcamResolution]

class ToupcamDeviceV2:
    " display name: model name or user-defined name (if any and Toupcam_EnumWithName, Toupcam_EnumV2 always returns model name) "
    displayname:str
    "camid"
    id:str
    model:ToupcamModelV2

type AutoExposure=Literal[0,1,2]
"0: off, 1: continuous mode, 2: once mode"

type HFlip=Literal[0,1]
"0: no, 1: yes"
type VFlip=Literal[0,1]
"0: no, 1: yes"

type PullModeCallback=Callable[[int,Any],None]
"""
pull mode callback

typedef void (*PTOUPCAM_EVENT_CALLBACK)(unsigned nEvent, void* ctxEvent);
PTOUPCAM_EVENT_CALLBACK funEvent, void* ctxEvent: callback function specified by user's application and callback context parameter.

int arg is TOUPCAM_EVENT_*
see e.g. TOUPCAM_EVENT_EXPOSURE (exposure/analog gain changed), TOUPCAM_EVENT_IMAGE (image acquired, ready to pull)
"""

type PTOUPCAM_DATA_CALLBACK_V4=Callable[[Any,ToupcamFrameInfoV3,int,Any],None]
"""
typedef void (__stdcall* PTOUPCAM_DATA_CALLBACK_V4)(const void* pData, const ToupcamFrameInfoV3* pInfo, int bSnap, void* ctxData);

bSnap: image acquired with snap?
"""
type PTOUPCAM_DATA_CALLBACK_V3=Callable[[Any,ToupcamFrameInfoV2,int,Any],None]
"""
typedef void (__stdcall* PTOUPCAM_DATA_CALLBACK_V3)(const void* pData, const ToupcamFrameInfoV2* pInfo, int bSnap, void* ctxData);

bSnap: image acquired with snap?
"""

# options
TOUPCAM_OPTION_PIXEL_FORMAT:int
"#define TOUPCAM_OPTION_PIXEL_FORMAT           0x1a       /* [RW] pixel format, TOUPCAM_PIXELFORMAT_xxxx */"
TOUPCAM_OPTION_RGB:int
"#define TOUPCAM_OPTION_RGB                    0x0c       /* [RW] 0 => RGB24; 1 => enable RGB48 format when bitdepth > 8; 2 => RGB32; 3 => 8 Bits Grey (only for mono camera); 4 => 16 Bits Grey (only for mono camera when bitdepth > 8); 5 => 64(RGB64) */"
TOUPCAM_OPTION_LOW_NOISE:int
"#define TOUPCAM_OPTION_LOW_NOISE              0x38       /* [RW] low noise mode (Higher signal noise ratio, lower frame rate): 1 => enable */"
TOUPCAM_OPTION_LOW_POWERCONSUMPTION:int
"#define TOUPCAM_OPTION_LOW_POWERCONSUMPTION   0x66       /* [RW] Low Power Consumption: 0 => disable, 1 => enable */"
TOUPCAM_OPTION_ZERO_PADDING:int
"#define TOUPCAM_OPTION_ZERO_PADDING           0x78       /* [RW] Zero padding: 0 => high, 1 => low; default: 0 */"
TOUPCAM_OPTION_TESTPATTERN:int
"""
#define TOUPCAM_OPTION_TESTPATTERN            0x28       /* [RW] test pattern:
                                                            0: off
                                                            3: monochrome diagonal stripes
                                                            5: monochrome vertical stripes
                                                            7: monochrome horizontal stripes
                                                            9: chromatic diagonal stripes
                                                         */

"""
TOUPCAM_OPTION_BITDEPTH:int
"#define TOUPCAM_OPTION_BITDEPTH               0x06       /* [RW] 0 = 8 bits mode, 1 = 16 bits mode, subset of TOUPCAM_OPTION_PIXEL_FORMAT */"
TOUPCAM_OPTION_RAW:int
"""#define TOUPCAM_OPTION_RAW                    0x04       /* [RW]
                                                            0: RGB mode
                                                            1: RAW mode, read the CMOS or CCD raw data
                                                            -1: RAW mode, the difference from 1 is the execution of FFC, DFC, FPNC, black balance, and white balance
                                                            default value: 0
                                                         */
"""
TOUPCAM_OPTION_BANDWIDTH:int
"#define TOUPCAM_OPTION_BANDWIDTH              0x2e       /* [RW] bandwidth, [1-100]% */"
TOUPCAM_OPTION_EXPOSURE_PRE_DELAY:int
TOUPCAM_OPTION_EXPOSURE_POST_DELAY:int

# feature flags
TOUPCAM_FLAG_LOW_NOISE:int
"#define TOUPCAM_FLAG_LOW_NOISE            0x0000010000000000  /* support low noise mode (Higher signal noise ratio, lower frame rate) */"

TOUPCAM_FLAG_MONO:int
"#define TOUPCAM_FLAG_MONO                 0x00000010  /* monochromatic */"
TOUPCAM_FLAG_RAW10:int
"#define TOUPCAM_FLAG_RAW10                0x00001000  /* pixel format, RAW 10bits */"
TOUPCAM_FLAG_RAW12:int
"#define TOUPCAM_FLAG_RAW12                0x00002000  /* pixel format, RAW 12bits */"
TOUPCAM_FLAG_RAW14:int
"#define TOUPCAM_FLAG_RAW14                0x00004000  /* pixel format, RAW 14bits */"
TOUPCAM_FLAG_RAW16:int
"#define TOUPCAM_FLAG_RAW16                0x00008000  /* pixel format, RAW 16bits */"

TOUPCAM_FLAG_RAW10PACK:int
"#define TOUPCAM_FLAG_RAW10PACK            0x0200000000000000  /* pixel format, RAW 10bits packed */"
TOUPCAM_FLAG_RAW12PACK:int
"#define TOUPCAM_FLAG_RAW12PACK            0x0020000000000000  /* pixel format, RAW 12bits packed */"

TOUPCAM_FLAG_TRIGGER_SINGLE:int
" 0x00200000          # only support trigger single: one trigger, one image"

# /* pixel format */
TOUPCAM_PIXELFORMAT_RAW8:int
" #define TOUPCAM_PIXELFORMAT_RAW8              0x00"
TOUPCAM_PIXELFORMAT_RAW10:int
" #define TOUPCAM_PIXELFORMAT_RAW10             0x01"
TOUPCAM_PIXELFORMAT_RAW12:int
" #define TOUPCAM_PIXELFORMAT_RAW12             0x02"
TOUPCAM_PIXELFORMAT_RAW14:int
" #define TOUPCAM_PIXELFORMAT_RAW14             0x03"
TOUPCAM_PIXELFORMAT_RAW16:int
" #define TOUPCAM_PIXELFORMAT_RAW16             0x04"
TOUPCAM_PIXELFORMAT_YUV411:int
" #define TOUPCAM_PIXELFORMAT_YUV411            0x05"
TOUPCAM_PIXELFORMAT_VUYY:int
" #define TOUPCAM_PIXELFORMAT_VUYY              0x06"
TOUPCAM_PIXELFORMAT_YUV444:int
" #define TOUPCAM_PIXELFORMAT_YUV444            0x07"
TOUPCAM_PIXELFORMAT_RGB888:int
" #define TOUPCAM_PIXELFORMAT_RGB888            0x08"
TOUPCAM_PIXELFORMAT_GMCY8:int
" #define TOUPCAM_PIXELFORMAT_GMCY8             0x09   /* map to RGGB 8 bits */"
TOUPCAM_PIXELFORMAT_GMCY12:int
" #define TOUPCAM_PIXELFORMAT_GMCY12            0x0a   /* map to RGGB 12 bits */"
TOUPCAM_PIXELFORMAT_UYVY:int
" #define TOUPCAM_PIXELFORMAT_UYVY              0x0b"
TOUPCAM_PIXELFORMAT_RAW12PACK:int
" #define TOUPCAM_PIXELFORMAT_RAW12PACK         0x0c"
TOUPCAM_PIXELFORMAT_RAW11:int
" #define TOUPCAM_PIXELFORMAT_RAW11             0x0d"
TOUPCAM_PIXELFORMAT_HDR8HL:int
" #define TOUPCAM_PIXELFORMAT_HDR8HL            0x0e   /* HDR, Bitdepth: 8, Conversion Gain: High + Low */"
TOUPCAM_PIXELFORMAT_HDR10HL:int
" #define TOUPCAM_PIXELFORMAT_HDR10HL           0x0f   /* HDR, Bitdepth: 10, Conversion Gain: High + Low */"
TOUPCAM_PIXELFORMAT_HDR11HL:int
" #define TOUPCAM_PIXELFORMAT_HDR11HL           0x10   /* HDR, Bitdepth: 11, Conversion Gain: High + Low */"
TOUPCAM_PIXELFORMAT_HDR12HL:int
" #define TOUPCAM_PIXELFORMAT_HDR12HL           0x11   /* HDR, Bitdepth: 12, Conversion Gain: High + Low */"
TOUPCAM_PIXELFORMAT_HDR14HL:int
" #define TOUPCAM_PIXELFORMAT_HDR14HL           0x12   /* HDR, Bitdepth: 14, Conversion Gain: High + Low */"
TOUPCAM_PIXELFORMAT_RAW10PACK:int
" #define TOUPCAM_PIXELFORMAT_RAW10PACK         0x13"

# events
TOUPCAM_EVENT_EXPOSURE:int
"#define TOUPCAM_EVENT_EXPOSURE          0x0001    /* exposure time or gain changed */"
TOUPCAM_EVENT_TEMPTINT:int
"#define TOUPCAM_EVENT_TEMPTINT          0x0002    /* white balance changed, Temp/Tint mode */"
TOUPCAM_EVENT_IMAGE:int
"#define TOUPCAM_EVENT_IMAGE             0x0004    /* live image arrived, use Toupcam_PullImageXXXX to get this image */"
TOUPCAM_EVENT_STILLIMAGE:int
"#define TOUPCAM_EVENT_STILLIMAGE        0x0005    /* snap (still) frame arrived, use Toupcam_PullStillImageXXXX to get this frame */"
TOUPCAM_EVENT_WBGAIN:int
"#define TOUPCAM_EVENT_WBGAIN            0x0006    /* white balance changed, RGB Gain mode */"
TOUPCAM_EVENT_TRIGGERFAIL:int
"#define TOUPCAM_EVENT_TRIGGERFAIL       0x0007    /* trigger failed */"
TOUPCAM_EVENT_BLACK:int
"#define TOUPCAM_EVENT_BLACK             0x0008    /* black balance changed */"
TOUPCAM_EVENT_FFC:int
"#define TOUPCAM_EVENT_FFC               0x0009    /* flat field correction status changed */"
TOUPCAM_EVENT_DFC:int
"#define TOUPCAM_EVENT_DFC               0x000a    /* dark field correction status changed */"
TOUPCAM_EVENT_ROI:int
"#define TOUPCAM_EVENT_ROI               0x000b    /* roi changed */"
TOUPCAM_EVENT_LEVELRANGE:int
"#define TOUPCAM_EVENT_LEVELRANGE        0x000c    /* level range changed */"
TOUPCAM_EVENT_AUTOEXPO_CONV:int
"#define TOUPCAM_EVENT_AUTOEXPO_CONV     0x000d    /* auto exposure convergence */"
TOUPCAM_EVENT_AUTOEXPO_CONVFAIL:int
"#define TOUPCAM_EVENT_AUTOEXPO_CONVFAIL 0x000e    /* auto exposure once mode convergence failed */"
TOUPCAM_EVENT_FPNC:int
"#define TOUPCAM_EVENT_FPNC              0x000f    /* fix pattern noise correction status changed */"
TOUPCAM_EVENT_ERROR:int
"#define TOUPCAM_EVENT_ERROR             0x0080    /* generic error */"
TOUPCAM_EVENT_DISCONNECTED:int
"#define TOUPCAM_EVENT_DISCONNECTED      0x0081    /* camera disconnected */"
TOUPCAM_EVENT_NOFRAMETIMEOUT:int
"#define TOUPCAM_EVENT_NOFRAMETIMEOUT    0x0082    /* no frame timeout error */"
TOUPCAM_EVENT_FOCUSPOS:int
"#define TOUPCAM_EVENT_FOCUSPOS          0x0084    /* focus positon */"
TOUPCAM_EVENT_NOPACKETTIMEOUT:int
"#define TOUPCAM_EVENT_NOPACKETTIMEOUT   0x0085    /* no packet timeout */"
TOUPCAM_EVENT_EXPO_START:int
"#define TOUPCAM_EVENT_EXPO_START        0x4000    /* hardware event: exposure start */"
TOUPCAM_EVENT_EXPO_STOP:int
"#define TOUPCAM_EVENT_EXPO_STOP         0x4001    /* hardware event: exposure stop */"
TOUPCAM_EVENT_TRIGGER_ALLOW:int
"#define TOUPCAM_EVENT_TRIGGER_ALLOW     0x4002    /* hardware event: next trigger allow */"
TOUPCAM_EVENT_HEARTBEAT:int
"#define TOUPCAM_EVENT_HEARTBEAT         0x4003    /* hardware event: heartbeat, can be used to monitor whether the camera is alive */"
TOUPCAM_EVENT_TRIGGER_IN:int
"#define TOUPCAM_EVENT_TRIGGER_IN        0x4004    /* hardware event: trigger in */"
TOUPCAM_EVENT_FACTORY:int
"#define TOUPCAM_EVENT_FACTORY           0x8001    /* restore factory settings */"

class ToupcamFrameInfoV2:
    pass

class ToupcamFrameInfoV3:
    width:int
    "unsigned            width;      /* image width, always available */"
    height:int
    "unsigned            height;     /* image height, always available */"
    flag:int
    "unsigned            flag;       /* TOUPCAM_FRAMEINFO_FLAG_xxxx, the flag is bit set, which means the corresponding value is valid, this depends on camera model */"
    seq:int
    "unsigned            seq;        /* frame sequence number */"
    timestamp:int
    "unsigned long long  timestamp;  /* microsecond */"
    shutterseq:int
    "unsigned            shutterseq; /* sequence shutter counter */"
    expotime:int
    "unsigned            expotime;   /* exposure time */"
    expogain:int
    "unsigned short      expogain;   /* exposure gain */"
    blacklevel:int
    "unsigned short      blacklevel; /* black level */"

class ToupcamGps:
    """
    unsigned long long utcstart;    /* exposure start time: nanosecond since epoch (00:00:00 UTC on Thursday, 1 January 1970, see https://en.wikipedia.org/wiki/Unix_time) */
    unsigned long long utcend;      /* exposure end time */
    int                longitude;   /* millionth of a degree, 0.000001 degree */
    int                latitude;
    int                altitude;    /* millimeter */
    unsigned short     satellite;   /* number of satellite */
    unsigned short     reserved;    /* not used */
    """
    pass

class ToupcamFrameInfoV4:
    v3:ToupcamFrameInfoV3

    reserved:int
    "unsigned reserved; /* not used */"

    uLum:int
    "unsigned uLum;"
    long:int
    "unsigned long long uFV;"
    long:int
    "unsigned long long timecount;"
    framecount:int
    "unsigned framecount, tricount;"
    tricount:int
    "unsigned framecount, tricount;"
    gps:ToupcamGps
    "ToupcamGps gps;"

TOUPCAM_OPTION_TRIGGER:int
"#define TOUPCAM_OPTION_TRIGGER                0x0b       /* [RW] 0 = video mode, 1 = software or simulated trigger mode, 2 = external trigger mode, 3 = external + software trigger, 4 = self trigger, default value = 0 */"
type TOUPCAM_OPTION_TRIGGER_VALUES=Literal[0,1,2,3]
"""
0 = video mode
1 = software or simulated trigger mode
2 = external trigger mode
3 = external + software trigger
"""

type IMAGE_BITS=Literal[24,32,48,8,16,64]
"24, 32, 48, 8, 16, 64, means RGB24, RGB32, RGB48, 8 bits grey, 16 bits grey or RGB64 images. bits = 0 means using default bits base on TOUPCAM_OPTION_RGB. This parameter is ignored in RAW mode."

type ROWPITCH=Literal[0,-1]
"the distance from one row to the next row, =0 means using the default row pitch, =-1 means minimum row pitch (zero padding)"

type IMAGEDATA=Any
"(PLACEHOLDER!, but:) Data buffer. Users have to make sure that the data buffer capacity is enough to save the image data, data buffer capacity must >= rowPitch * nHeight."

type BSTILL=Literal[0,1]
"to pull still image, set to 1, otherwise 0"

class HToupcam:
    def Close(self)->None:...

    def get_ExpoTime(self)->int:
        "get exposure time in us"
        ...
    def put_ExpoTime(self,time_us:int)->None:
        "set exposure time. may throw if autoexpo is enabled"
        ...
    def get_ExpTimeRange(self)->Tuple[int,int,int]:
        "get (min,max,default) exposure time in us"
        ...
    def get_RealExpoTime(self)->int:
        "get real expo time in us"
        ...

    def get_AutoExpoEnable(self)->AutoExposure:
        ...
    def put_AutoExpoEnable(self,aexpo:AutoExposure)->None:
        ...

    def get_ExpoAGain(self)->int:
        "TOUPCAM_API(HRESULT)  Toupcam_get_ExpoAGain(HToupcam h, unsigned short* Gain); /* percent, such as 300 */"
        ...
    def put_ExpoAGain(self, gain_percent:int)->None:
        "TOUPCAM_API(HRESULT)  Toupcam_put_ExpoAGain(HToupcam h, unsigned short Gain); /* percent */"
        ...
    def get_ExpoAGainRange(self)->Tuple[int,int,int]:
        """
        TOUPCAM_API(HRESULT)  Toupcam_get_ExpoAGainRange(HToupcam h, unsigned short* nMin, unsigned short* nMax, unsigned short* nDef);
        """
        ...

    def get_VFlip(self,)->VFlip:
        "TOUPCAM_API(HRESULT)  Toupcam_get_VFlip(HToupcam h, int* bVFlip);  /* vertical flip */"
        ...
    def put_VFlip(self,flip:VFlip)->None:
        "TOUPCAM_API(HRESULT)  Toupcam_put_VFlip(HToupcam h, int bVFlip);"
        ...
    def get_HFlip(self)->HFlip:
        "TOUPCAM_API(HRESULT)  Toupcam_get_HFlip(HToupcam h, int* bHFlip);"
        ...
    def put_HFlip(self,flip:HFlip)->None:
        "TOUPCAM_API(HRESULT)  Toupcam_put_HFlip(HToupcam h, int bHFlip); /* horizontal flip */"
        ...

    def StartPullModeWithCallback(self,callback:PullModeCallback,ctx:Any)->None:
        """
        start image stream connection

        stop with .Stop()
        """
        ...

    def PullImageV4(self,pImageData:IMAGEDATA,bStill:BSTILL,bits:IMAGE_BITS,rowPitch:ROWPITCH,frameInfo:ToupcamFrameInfoV4)->None:
        """
        fetch image data (into existing buffer imagedata)

        TOUPCAM_API(HRESULT)  Toupcam_PullImageV4(HToupcam h, void* pImageData, int bStill, int bits, int rowPitch, ToupcamFrameInfoV4* pInfo);
        """
        ...

    def WaitImageV4(self,nWaitMS:int,pImageData:IMAGEDATA,bStill:BSTILL,bits:IMAGE_BITS,rowPitch:ROWPITCH,pInfo:ToupcamFrameInfoV4):
        """
        wait to acquire an image (effectivelly trigger pullimagev4 after nWaitMS)

        TOUPCAM_API(HRESULT)  Toupcam_WaitImageV4(HToupcam h, unsigned nWaitMS, void* pImageData, int bStill, int bits, int rowPitch, ToupcamFrameInfoV4* pInfo);

        nWaitMS: The timeout interval, in milliseconds. If a nonzero value is specified, the function waits until the image is ok or the interval elapses.
             If nWaitMS is zero, the function does not enter a wait state if the image is not available; it always returns immediately; this is equal to Toupcam_PullImageV4.
        """

    def PullImage(self,pImageData:IMAGEDATA,bits:IMAGE_BITS,pnWidth:int,pnHeight:int):
        """
        TOUPCAM_API(HRESULT)  Toupcam_PullImage(HToupcam h, void* pImageData, int bits, unsigned* pnWidth, unsigned* pnHeight);
        """
        ...
    def PullImagewithRowPitch(self,pImageData:IMAGEDATA,bits:IMAGE_BITS,rowPitch:ROWPITCH,pnWidth:int,pnHeight:int):
        """
        TOUPCAM_API(HRESULT)  Toupcam_PullImageWithRowPitch(HToupcam h, void* pImageData, int bits, int rowPitch, unsigned* pnWidth, unsigned* pnHeight);
        """
        ...

    def TriggerSyncV4(self,nWaitMS:int,pImageData:IMAGEDATA,bits:IMAGE_BITS,rowPitch:ROWPITCH,frameInfo:ToupcamFrameInfoV4):
        """
        send trigger and wait for image to arrive
        
        overhead:
            rgb mode:
                150ms overhead at 500ms exposure time, 250 at 5ms
            raw mode:
                86ms overhead at 500ms exposure time, 158 at 5ms

        TOUPCAM_API(HRESULT)  Toupcam_TriggerSyncV4(HToupcam h, unsigned nWaitMS, void* pImageData, int bits, int rowPitch, ToupcamFrameInfoV4* pInfo);

        The timeout interval, in milliseconds. If nWaitMS is zero, it means using the default value (exposure time * 102% + 4000 milliseconds), 0xffffffff means waiting forever, and other values represent the specific number of milliseconds.
        """
        ...

    def Trigger(self,nNumber:int)->None:
        """

        send trigger, image can be received in callback
        
        overhead:
            rgb mode:
                250ms overhead at 500ms exposure time, 350 at 5ms
            raw mode:
                250ms overhead at 500ms exposure time, 350 at 5ms

        TOUPCAM_API(HRESULT)  Toupcam_Trigger(HToupcam h, unsigned short nNumber);

        /*
            soft[ware] trigger:
            nNumber:    0xffff:     trigger continuously
                        0:          cancel trigger, see TOUPCAM_OPTION_TRIGGER_CANCEL_MODE
                        others:     number of images to be triggered
        */
        """
        ...

    def put_Option(self,iOption:int,iValue:int)->None:
        """
        e.g. iOption=TOUPCAM_OPTION_TRIGGER, iValue=<any of TOUPCAM_OPTION_TRIGGER_VALUES>
        TOUPCAM_API(HRESULT)  Toupcam_put_Option(HToupcam h, unsigned iOption, int iValue);
        """
    
    def get_Option(self,iOption)->int:
        """
        TOUPCAM_API(HRESULT)  Toupcam_get_Option(HToupcam h, unsigned iOption, int* piValue);
        """

    def put_Size(self,nWidth:int,nHeight:int)->None:
        """
        TOUPCAM_API(HRESULT)  Toupcam_put_Size(HToupcam h, int nWidth, int nHeight);
        """
        ...
    def get_Size(self,)->Tuple[int,int]:
        """
        TOUPCAM_API(HRESULT)  Toupcam_get_Size(HToupcam h, int* pWidth, int* pHeight);
        """
        ...
    def put_eSize(self,nResolutionIndex:int)->None:
        """
        TOUPCAM_API(HRESULT)  Toupcam_put_eSize(HToupcam h, unsigned nResolutionIndex);
        """
        ...
    def get_eSize(self,)->int:
        """
        TOUPCAM_API(HRESULT)  Toupcam_get_eSize(HToupcam h, unsigned* pnResolutionIndex);
        """
        ...
    def get_FinalSize(self,)->Tuple[int,int]:
        """
        TOUPCAM_API(HRESULT)  Toupcam_get_FinalSize(HToupcam h, int* pWidth, int* pHeight);
        """
        ...
    
    def StartPushModeV4(self,funData:PTOUPCAM_DATA_CALLBACK_V4,ctxData,funEvent,ctxEvent)->None:
        """
        typedef void (__stdcall* PTOUPCAM_DATA_CALLBACK_V4)(const void* pData, const ToupcamFrameInfoV3* pInfo, int bSnap, void* ctxData);
        TOUPCAM_API(HRESULT)  Toupcam_StartPushModeV4(HToupcam h, PTOUPCAM_DATA_CALLBACK_V4 funData, void* ctxData, PTOUPCAM_EVENT_CALLBACK funEvent, void* ctxEvent);
        """
        ...
    def StartPushModeV3(self,funData:PTOUPCAM_DATA_CALLBACK_V3,ctxData,funEvent,ctxEvent)->None:
        """
        typedef void (__stdcall* PTOUPCAM_DATA_CALLBACK_V3)(const void* pData, const ToupcamFrameInfoV2* pInfo, int bSnap, void* ctxData);
        TOUPCAM_API(HRESULT)  Toupcam_StartPushModeV3(HToupcam h, PTOUPCAM_DATA_CALLBACK_V3 funData, void* ctxData, PTOUPCAM_EVENT_CALLBACK funEvent, void* ctxEvent);
        """
        ...

    def Stop(self)->None:
        """
        stop ongiong pull/push mode (regardless of trigger(n) state)

        TOUPCAM_API(HRESULT)  Toupcam_Stop(HToupcam h);
        """
        ...

    def Pause(self,bPause:int)->None:
        """
        TOUPCAM_API(HRESULT)  Toupcam_Pause(HToupcam h, int bPause); /* 1 => pause, 0 => continue */
        """
        ...

    def MaxBitDepth(self)->int:
        "TOUPCAM_API(HRESULT)  Toupcam_get_MaxBitDepth(HToupcam h); /* get the max bitdepth of this camera, such as 8, 10, 12, 14, 16 */"
        ...

class Toupcam:
    @staticmethod
    def EnumV2()->List[ToupcamDeviceV2]: ...

    @staticmethod
    def Open(camid:str)->HToupcam|None:...
